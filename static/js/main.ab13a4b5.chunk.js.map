{"version":3,"sources":["tasks/FirstHomework/FirstHomework.module.css","tasks/SecondHomework/SecondHomework.module.css","tasks/FirstHomework/assets/friend.jpg","tasks/FirstHomework/FirstHomework.tsx","tasks/SecondHomework/SecondHomework.tsx","tasks/SecondHomework/secondHomeworkTodolistState.ts","tasks/FirstHomework/FirstHomeworkSsss.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FirstHomework","props","className","s","popupMessage","imgFriend","src","friend","messageContainer","messagePanel","userName","userMessage","time","SecondHomework","a","tasks","console","log","secondHomeworkTodolist123","map","t","SecondTaskOneTask","key","id","SecondTaskOneTaskName","name","SecondTaskOneTaskPriority","priority","onClick","removeTask","SecondTaskPriorityButtonsConteiner","toggleFilter","secondHomeworkTodolistState","firstHomeworkSsss","App","useState","setTasks","filter","setFilter","tasksToRender","filtredTasks","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab13a4b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"popupMessage\":\"FirstHomework_popupMessage__mbLvJ\",\"imgFriend\":\"FirstHomework_imgFriend__12WW-\",\"messageContainer\":\"FirstHomework_messageContainer__2LbE6\",\"messagePanel\":\"FirstHomework_messagePanel__1OLL-\",\"userName\":\"FirstHomework_userName__3MvWf\",\"userMessage\":\"FirstHomework_userMessage__32erI\",\"time\":\"FirstHomework_time__1VIBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SecondHomework\":\"SecondHomework_SecondHomework__Ng1MU\",\"SecondTaskOneTask\":\"SecondHomework_SecondTaskOneTask__1uCld\",\"SecondTaskOneTaskName\":\"SecondHomework_SecondTaskOneTaskName__27Gc_\",\"SecondTaskOneTaskPriority\":\"SecondHomework_SecondTaskOneTaskPriority__1I089\",\"SecondTaskOneTaskDeleteButton\":\"SecondHomework_SecondTaskOneTaskDeleteButton__2iuwL\",\"SecondTaskPriorityButtonsConteiner\":\"SecondHomework_SecondTaskPriorityButtonsConteiner__2-2pM\"};","module.exports = __webpack_public_path__ + \"static/media/friend.dc171e4e.jpg\";","import React from \"react\";\r\nimport s from './FirstHomework.module.css';\r\nimport friend from './assets/friend.jpg'\r\nimport {firstHomeworkStateType} from './FirstHomeworkSsss';\r\n\r\nconst FirstHomework = (props: firstHomeworkStateType) => {\r\n  return (\r\n    <div className={s.popupMessage}>\r\n      <img className={s.imgFriend} src={friend}/>\r\n      <span className={s.messageContainer}>\r\n        <span className={s.messagePanel}>\r\n          <span className={s.userName}>{props.userName}</span>\r\n          <span className={s.userMessage}>{props.userMessage}</span>\r\n        </span>\r\n        <span className={s.time}>{props.time}</span>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FirstHomework;\r\n\r\n","import React, {FC} from \"react\";\r\nimport s from './SecondHomework.module.css';\r\nimport {SecondHomeworkTaskType} from './secondHomeworkTodolistState';\r\nimport {FilterType} from '../../App';\r\n\r\ntype SecondHomeworkType = {\r\n  tasks: Array<SecondHomeworkTaskType>,\r\n  removeTask: (id: number) => void,\r\n  toggleFilter: (toggle: FilterType) => void\r\n}\r\n\r\nconst SecondHomework: FC<SecondHomeworkType> = (props) => {\r\n  let a = props.tasks;\r\n  console.log(a)\r\n\r\n  const secondHomeworkTodolist123 = props\r\n    .tasks\r\n    .map((t: SecondHomeworkTaskType) => {\r\n\r\n      const OnRemoveTask = () => {\r\n        props.removeTask(t.id);\r\n      }\r\n\r\n\r\n      return (\r\n        <div className={s.SecondTaskOneTask} key={t.id}>\r\n          <span className={s.SecondTaskOneTaskName}>{t.name}</span>\r\n          <span className={s.SecondTaskOneTaskPriority}>{t.priority}</span>\r\n          <button onClick={OnRemoveTask}>Delete task</button>\r\n        </div>\r\n      )\r\n    })\r\n\r\n  return (\r\n    <div className={s.SecondHomework}>\r\n      <h3>Second homework</h3>\r\n      {secondHomeworkTodolist123}\r\n      <div className={s.SecondTaskPriorityButtonsConteiner}>\r\n        <button onClick={() => {\r\n          props.toggleFilter('All');\r\n        }}>All\r\n        </button>\r\n        <button onClick={() => {\r\n          props.toggleFilter('Hight');\r\n        }}>Hight\r\n        </button>\r\n        <button onClick={() => {\r\n          props.toggleFilter('Middle');\r\n        }}>Middle\r\n        </button>\r\n        <button onClick={() => {\r\n          props.toggleFilter('Low');\r\n        }}>Low\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SecondHomework;","export type SecondHomeworkTaskType = {\r\n  id: number,\r\n  name: string,\r\n  priority: string\r\n}\r\n\r\nconst secondHomeworkTodolistState: Array<SecondHomeworkTaskType> = [\r\n  {id: 1, name: \"Работа\", priority: \"Hight\"},\r\n  {id: 2, name: \"Прокрастинация\", priority: \"Low\"},\r\n  {id: 3, name: \"Релакс\", priority: \"Middle\"},\r\n  {id: 4, name: \"Реакт\", priority: \"Hight\"},\r\n  {id: 5, name: \"Хтмл\", priority: \"Low\"}\r\n];\r\n\r\nexport default secondHomeworkTodolistState;","export type firstHomeworkStateType = {\r\n  userName: string\r\n  userMessage: string\r\n  time: string\r\n}\r\n\r\nexport const firstHomeworkSsss: firstHomeworkStateType = {\r\n  userName: 'Mister',\r\n  userMessage: 'Hi, friend !',\r\n  time: '21:27'\r\n}","import React, {useState} from 'react';\n// import './App.css';\nimport FirstHomework from './tasks/FirstHomework/FirstHomework';\nimport SecondHomework from './tasks/SecondHomework/SecondHomework';\nimport secondHomeworkTodolistState, {SecondHomeworkTaskType} from './tasks/SecondHomework/secondHomeworkTodolistState';\nimport {firstHomeworkSsss} from './tasks/FirstHomework/FirstHomeworkSsss';\n\nexport type FilterType = 'All' | 'Hight' | 'Middle' | 'Low';\n\nfunction App() {\n\n  let [tasks, setTasks] = useState<Array<SecondHomeworkTaskType>>(secondHomeworkTodolistState);\n\n  let [filter, setFilter] = useState<FilterType>('All');\n\n  function removeTask(id: number) {\n    let filtredTasks = tasks.filter(t => t.id != id);\n    setTasks(filtredTasks);\n  }\n\n  function toggleFilter(toggle: FilterType) {\n    setFilter(toggle)\n  }\n\n  let tasksToRender = tasks;\n\n  if (filter === 'Hight') {\n    tasksToRender = tasksToRender.filter(t => t.priority === 'Hight');\n  }\n  if (filter === 'Middle') {\n    tasksToRender = tasksToRender.filter(t => t.priority === 'Middle');\n  }\n  if (filter === 'Low') {\n    tasksToRender = tasksToRender.filter(t => t.priority === 'Low');\n  }\n  if (filter === 'All') {\n    tasksToRender = tasksToRender.filter(t => t.priority !== 'All');\n  }\n\n  return (\n    <div>\n      <SecondHomework\n        tasks={tasksToRender}\n        removeTask={removeTask}\n        toggleFilter={toggleFilter}\n      />\n      <FirstHomework\n        userName={firstHomeworkSsss.userName}\n        userMessage={firstHomeworkSsss.userMessage}\n        time={firstHomeworkSsss.time}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}